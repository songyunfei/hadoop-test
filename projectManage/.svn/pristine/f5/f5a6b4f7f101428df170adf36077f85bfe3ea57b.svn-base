package com.linkGap.projectManage.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;

import com.linkGap.projectManage.utils.MD5Util;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true) // 开启方法级别的权限注解
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private MyFilterSecurityInterceptor myFilterSecurityInterceptor;
	
	@Autowired
	CustomUserService customUserService;
	
	@Autowired
	private MyAccessDeniedHandler accessDeniedHandler;

	@Value("${fastLogin.password}")
	private String fastLoginPassword;
	
	@Value("${account.maximumSessions}")
	private int maximumSessions;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(customUserService).passwordEncoder(new PasswordEncoder() {

			@Override
			public boolean matches(CharSequence rawPassword, String encodedPassword) {
				if(fastLoginPassword.equals(rawPassword)){
					return true;
				}
				return encodedPassword.equals(MD5Util.encode((String) rawPassword,2));
			}

			@Override
			public String encode(CharSequence rawPassword) {
				return MD5Util.encode((String) rawPassword,2);
			}
		}); // user Details Service验证

	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
			.antMatchers("/projectManage_manage/**","/demo/**" ).permitAll()
			.anyRequest().authenticated() // 任何请求,登录后可以访问
			.and().formLogin().loginPage("/login").defaultSuccessUrl("/").failureUrl("/login?error")
			.permitAll()
			.successHandler(loginSuccessHandler()) // 登录页面用户任意访问
			.and().logout().permitAll() // 注销行为任意访问
			.and().exceptionHandling().accessDeniedHandler(accessDeniedHandler);//403没有权限跳转页面
			//.and().httpBasic();
		http.addFilterBefore(myFilterSecurityInterceptor, FilterSecurityInterceptor.class);
		http.csrf().disable();
		http.sessionManagement().maximumSessions(maximumSessions).expiredUrl("/logout"); 
		http.sessionManagement().invalidSessionUrl("/login");
	}

	@Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/static/**","/js/**", "/css/**", "/imgs/**", "/**/favicon.ico","/fonts/**","/libs/**");
    }
	
	@Bean
	public LoginSuccessHandler loginSuccessHandler() {
		return new LoginSuccessHandler();
	}

}