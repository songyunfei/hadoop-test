package com.linkGap.projectManage.security;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.access.SecurityConfig;
import org.springframework.security.web.FilterInvocation;
import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.linkGap.projectManage.dao.SysPermissionMapper;
import com.linkGap.projectManage.model.ActiveUser;
import com.linkGap.projectManage.model.entity.SysPermission;
/**
 * 配置用户角色
 * @author renhengli
 *
 */
@Service
public class MySecruityMetadataService implements FilterInvocationSecurityMetadataSource {

	@Autowired
	private SysPermissionMapper permissionDao;

	private HashMap<String, Collection<ConfigAttribute>> map = null;

	/**
	 * 加载资源，初始化资源变量
	 */
	public void loadResourceDefine() {
		map = new HashMap<>();
		Collection<ConfigAttribute> array;
		ConfigAttribute cfg;
		//List<SysPermission> permissions = permissionDao.findByAdminUserId(userId);
		List<SysPermission> permissions = permissionDao.findAll();
		for (SysPermission permission : permissions) {
			array = new ArrayList<>();
			cfg = new SecurityConfig(permission.getName());
			array.add(cfg);
			//如果对于多个角色拥有相同的权限菜单，需做如下处理
			if(map.containsKey(permission.getUrl())){
				Collection<ConfigAttribute> array_old = map.get(permission.getUrl());
				array.addAll(array_old);
			}
			map.put(permission.getUrl(), array);
		}

	}

	/**
	 * getAttributes方法返回本次访问需要的权限，可以有多个权限。在上面的实现中如果没有匹配的url直接返回null，也就是没有配置权限的url默认都为白名单，想要换成默认是黑名单只要修改这里即可。
	 */
	@Override
	public Collection<ConfigAttribute> getAttributes(Object object) throws IllegalArgumentException {
//		if (map == null){
//			HttpServletRequest request1 = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
//			ActiveUser activeUser = (ActiveUser) request1.getSession().getAttribute("activeUser");
//			if(activeUser == null){
//				return null;
//			}
//			loadResourceDefine(activeUser.getUserid());
//		}
		if (map == null)
			loadResourceDefine();
		HttpServletRequest request = ((FilterInvocation) object).getHttpRequest();
		AntPathRequestMatcher matcher;
		String resUrl;
		for (Iterator<String> iter = map.keySet().iterator(); iter.hasNext();) {
			resUrl = iter.next();
			if(resUrl == null || StringUtils.isEmpty(resUrl)){
				continue;
			}
			matcher = new AntPathRequestMatcher(resUrl);
			if (matcher.matches(request)) {
				return map.get(resUrl);
				
			}
		}
		return null;
	}

	/**
	 * getAllConfigAttributes方法如果返回了所有定义的权限资源，Spring Security会在启动时校验每个ConfigAttribute是否配置正确，不需要校验直接返回null
	 */
	@Override
	public Collection<ConfigAttribute> getAllConfigAttributes() {
		return null;
	}

	/**
	 * supports方法返回类对象是否支持校验，web项目一般使用FilterInvocation来判断，或者直接返回true
	 */
	@Override
	public boolean supports(Class<?> clazz) {
		return true;
	}
}