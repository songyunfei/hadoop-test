package com.linkGap.projectManage.utils;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Iterator;

import javax.imageio.ImageIO;

import com.drew.imaging.ImageMetadataReader;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.exif.ExifIFD0Directory;

import sun.misc.BASE64Decoder;


/**
 * 
 * @author renhengli
 *
 */
public class ImageUtil {


    /**
     * 对字符串进行Base64解码并生成图片
     * @param imgStr
     * @param imgPath
     * @return
     * @throws Exception
     */
    public static boolean decodeBase64Image(String imgStr, String imgPath) throws Exception {
        if (imgStr == null) //图像数据为空
            return false;
        BASE64Decoder decoder = new BASE64Decoder();
        //Base64解码
        byte[] b = decoder.decodeBuffer(imgStr);
        for (int i = 0; i < b.length; ++i) {
            if (b[i] < 0) {//调整异常数据
                b[i] += 256;
            }
        }
        //生成jpeg图片
        OutputStream out = new FileOutputStream(imgPath);
        out.write(b);
        out.flush();
        out.close();
        return true;
    }

    /**
     * 处理图片
     * @param imgStr
     * @param imgPath
     * @return
     * @throws Exception
     */
    public static String dealBase64Image(String imgStr, String imgPath) throws Exception{
        if(decodeBase64Image(imgStr, imgPath)){
            return dealOrientationOnIOS(imgPath);
        }
        return "no";
    }


    /**
     * 处理图片在移动端显示的问题：在ios上显示会出现图片垂直显示的问题
     * @param imgPath
     * @return
     * @throws Exception
     */
    public static String dealOrientationOnIOS(String imgPath) throws Exception{

        int orientation = 0;
        try {

            File file = new File(imgPath);
            if (!file.exists()) {
                return "";
            }
            Metadata metadata = ImageMetadataReader.readMetadata(file);
            Iterator<Directory> ite = metadata.getDirectories().iterator();
            while (ite.hasNext()) {
                Directory directory = ite.next();
                if (directory.containsTag(ExifIFD0Directory.TAG_ORIENTATION)) {
                    orientation = directory.getInt(ExifIFD0Directory.TAG_ORIENTATION);
                    break;
                }
            }
            Image img = ImageIO.read(file);
            int newWidth = (int)img.getWidth(null);
            int newHeight = (int)img.getHeight(null);
            BufferedImage oldImg = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);
               /*
                * Image.SCALE_SMOOTH 的缩略算法 生成缩略图片的平滑度的
                * 优先级比速度高 生成的图片质量比较好 但速度慢
                */
            oldImg.getGraphics().drawImage(img.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH), 0, 0, null);
//            File origFile = new File(imgPath);
//            ImageIO.write(oldImg, "jpg", origFile);
            if (orientation > 1) {
//            	   1 top left side
//            	   2 top right side
//            	   3 bottom right side
//            	   4 bottom left side
//            	   5 left side top
//            	   6 right side top
//            	   7 right side bottom
//            	   8 left side bottom
                if (orientation == 6) {
                    //handle the case for iphone picture
                    BufferedImage newImg = new BufferedImage(newHeight,newWidth,BufferedImage.TYPE_INT_BGR);
                    Graphics2D g2d =newImg.createGraphics();
                    AffineTransform origXform = g2d.getTransform();
                    AffineTransform newXform = (AffineTransform)(origXform.clone());
                    // center of rotation is center of the panel
                    double xRot = newHeight/2.0;
                    newXform.rotate(Math.toRadians(90.0), xRot, xRot); //旋转270度
                    g2d.setTransform(newXform);
                    // draw image centered in panel
                    g2d.drawImage(oldImg, 0, 0, null);
                    // Reset to Original
                    g2d.setTransform(origXform);

                    int dotIndex = imgPath.lastIndexOf(".");
                    String prefix = imgPath.substring(0, dotIndex);
                    String postfix = imgPath.substring(dotIndex);
                    String newFileName = prefix + "new" + postfix;
                    File newFile = new File( newFileName);
                    ImageIO.write(newImg, "jpg", newFile);
                    file.delete();
                    newFile.renameTo(file);
                }

            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return "ok";
    }

}
