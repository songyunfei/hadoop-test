package com.linkGap.projectManage.controller;

import java.io.File;
import java.net.URLDecoder;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.linkGap.projectManage.model.ReturnResultUtil;
import com.linkGap.projectManage.model.entity.ProjectInfo;
import com.linkGap.projectManage.model.entity.ProjectStepLogs;
import com.linkGap.projectManage.model.view.ProjectInfoView;
import com.linkGap.projectManage.model.view.ProjectRequestParams;
import com.linkGap.projectManage.model.view.ProjectStepList;
import com.linkGap.projectManage.service.ProjectService;
import com.linkGap.projectManage.service.ProjectStepService;
//import com.linkGap.projectManage.utils.ImageCompressionUtils;


@RestController
@RequestMapping(value="/project")
public class ProjectController {
    
	@Autowired
	private ProjectService projectService;
	
	@Autowired
	private ProjectStepService projectStepService;
	
	//@Value("${upload.image.path}")
	private String picPath="F:\\";
	
	/**
	 * 工程列表查询
	 * @author  songyunfei
	 * 2018年1月12日
	 */
	@RequestMapping(value="/list",method=RequestMethod.GET)
	public ReturnResultUtil projectList(ProjectRequestParams params){
		try {
			ReturnResultUtil result=projectService.queryList(params);
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return new ReturnResultUtil("01","后台异常");
		}
	}
	/**
	 * 添加工程
	 * @author  songyunfei
	 * 2018年1月15日
	 */
	@RequestMapping(value="/add",method=RequestMethod.POST)
	
	public ReturnResultUtil addProject(ProjectInfo projectInfo,
			                           @RequestParam(value="constructionfiles") MultipartFile[] constructionfiles,
			                           @RequestParam(value="contractImagefiles")MultipartFile[] contractImagefiles,
			                           HttpServletRequest request){
		try {
			String name=request.getParameter("buildingName");
			String buildname=URLDecoder.decode(projectInfo.getBuildingName());
			//施工图纸
			String constructionImageUrls ="";
			//施工图纸缩略图
			String constructionShortImageUrls ="";
			if(constructionfiles!=null&&constructionfiles.length>0){
				for (MultipartFile multipartFile : constructionfiles) {
				     String fileName=multipartFile.getOriginalFilename();
				     fileName=System.currentTimeMillis()+fileName;
				     String path=picPath+File.separator+fileName;
				     String zippath=picPath+File.separator+"zip_"+fileName;
				     multipartFile.transferTo(new File(path));
				     //ImageCompressionUtils.zipWidthHeightImageFile(path,zippath,100,100,1f);
				     constructionImageUrls+=path+",";
				     constructionShortImageUrls+=zippath+",";		 
				}
			}
			String contractImageUrls ="";
			String contractShortImageUrls ="";
			if(contractImagefiles!=null&&contractImagefiles.length>0){
			for (MultipartFile multipartFile : contractImagefiles) {
			     String fileName=multipartFile.getOriginalFilename();
			     fileName=System.currentTimeMillis()+fileName;
			     String path=picPath+File.separator+fileName;
			     String zippath=picPath+File.separator+"zip_"+fileName;
			     multipartFile.transferTo(new File(path));
			     //ImageCompressionUtils.zipWidthHeightImageFile(path,zippath,100,100,1f);
			     contractImageUrls+=path+",";
			     contractShortImageUrls+=zippath+",";		 
			}
			}
			projectInfo.setConstructionImageUrls(constructionImageUrls);
			projectInfo.setConstructionShortImageUrls(constructionShortImageUrls);
			projectInfo.setContractImageUrls(contractImageUrls);
			projectInfo.setContractShortImageUrls(contractShortImageUrls);
			this.projectService.saveProject(projectInfo);
		} catch (Exception e) {
			e.printStackTrace();
			return new ReturnResultUtil("01","保存失败，请稍后再试!");
		}
		return new ReturnResultUtil();
	}
	
	
	/**
	 * 根据工程id查询工程详细
	 * @param request
	 * @param projectInfoId
	 * @return
	 */
	@RequestMapping(value="/{projectInfoId}",method=RequestMethod.GET)
	public ReturnResultUtil getProjectDetail(HttpServletRequest request, @PathVariable("projectInfoId") String projectInfoId){
		try {
			if(projectInfoId==null||projectInfoId.equals("")){
				return new ReturnResultUtil("01","工程id为空");
			}
			ProjectInfoView projectInfoView= projectService.selectByProjectId(Integer.parseInt(projectInfoId));
			return new ReturnResultUtil(projectInfoView);
		} catch (Exception e) {
			e.printStackTrace();

			return new ReturnResultUtil("01","后台异常");
		}
	
	}
	
	
	/**
	 * 根据项目id查步骤
	 * @author  lixin
	 * 2018年1月16日
	 */
	@RequestMapping(value="/projectStep/{projectInfoId}",method=RequestMethod.GET)
	public ReturnResultUtil getProjectStepByProjectInfoId(@PathVariable("projectInfoId") Integer projectInfoId, HttpServletRequest request){
		try {
			ReturnResultUtil result=projectStepService.getProjectStepByProjectInfoId(projectInfoId);
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return new ReturnResultUtil("01","后台异常");
		}
	}
	
	/**
	 * 保存工程步骤
	 * @author  lixin
	 * 2018年1月16日
	 */
	@RequestMapping(value="/projectStep/{projectInfoId}",method=RequestMethod.POST)
	public ReturnResultUtil saveProjectSteps(@PathVariable("projectInfoId") Integer projectInfoId, ProjectStepList projectStepList, HttpServletRequest request){
		try {
			if(null!=projectStepList&&!CollectionUtils.isEmpty(projectStepList.getProjectStepList())){
				ReturnResultUtil result=projectStepService.saveProjectSteps(projectStepList.getProjectStepList(), projectInfoId);
				return result;
			}else{
				return new ReturnResultUtil("01","步骤为空");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new ReturnResultUtil("01","后台异常");
		}
	}
	
	/**
	 * 查步骤操作日志
	 * @author  lixin
	 * 2018年1月16日
	 */
	@RequestMapping(value="/projectStepLog/list/{stepId}",method=RequestMethod.GET)
	public ReturnResultUtil getLogByStepId(@PathVariable("stepId") Integer stepId, HttpServletRequest request){
		try {
			ReturnResultUtil result=projectStepService.getLogByStepId(stepId);
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return new ReturnResultUtil("01","后台异常");
		}
	}
	
	/**
	 * 步骤操作
	 * @author  lixin
	 * 2018年1月17日
	 */
	@RequestMapping(value="/opreateStep",method=RequestMethod.POST)
	public ReturnResultUtil opreateStep(ProjectStepLogs projectStepLogs, HttpServletRequest request){
		try {
			ReturnResultUtil result=projectStepService.opreateStep(projectStepLogs);
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			return new ReturnResultUtil("01","后台异常");
		}
	}
	
}
